<?xml version="1.0" encoding="utf-8"?>
<ResizableWindow xmlns="com.gs.dbex.layout.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	height="540" width="800" showWindowButtons="true" 
	titleIcon="{DbexImageConstants.getInstance().dbex24x24Icon}" creationPolicy="all"
	creationComplete="onCreationComplete()" xmlns:visuals="com.gs.dbex.visuals.*" xmlns:code="http://code.google.com/p/flexlib/" 
	xmlns:view="com.gs.dbex.common.view.*" xmlns:view1="com.gs.dbex.application.view.*">
	
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			import mx.controls.Alert;
			import flexlib.controls.tabBarClasses.SuperTab;
			import com.gs.dbex.common.model.db.Column;
			import com.gs.dbex.common.model.db.Table;
			import mx.controls.TabBar;
			import com.gs.dbex.common.model.db.Schema;
			import com.gs.dbex.common.model.db.Database;
			import com.gs.dbex.control.TreeNode;
			import com.gs.dbex.DbexCommonModelLocator;
			import com.gs.dbex.common.business.DbexCommonController;
			import com.gs.dbex.application.DbexApplicationModelLocator;
			import com.gs.dbex.command.UICommandConstants;
			import com.gs.dbex.control.DbexResizeEvent;
			
			[Bindable]
			public var imageLocator:DbexImageConstants = DbexImageConstants.getInstance();
			[Bindable]
			private var commonModelLocator:DbexCommonModelLocator = DbexCommonModelLocator.getInstance();
			[Bindable]
			private var applicationModelLocator:DbexApplicationModelLocator = DbexApplicationModelLocator.getInstance();
			[Bindable]
            public var databaseTreeMenu:ContextMenu = new ContextMenu();
            public var lastTreeItem:ListEvent;

			
			
			public function setLastTreeItem(event:ListEvent):void
            {
                lastTreeItem = event;
            }
			
			private function changeSize(event:DbexResizeEvent):void
            {
            	
            }
            
            public function databaseTreeMenuTriggered(event:ContextMenuEvent):void
            {
                databaseTreeMenu.customItems = new Array();
                    
                if( lastTreeItem != null )
                {
                    if( lastTreeItem.itemRenderer.data.TargetType == TreeNode.TARGET_TYPE_TABLE ){
                        var addParentMenuItem:ContextMenuItem = new ContextMenuItem('Add Column');
                        databaseTreeMenu.customItems.push(addParentMenuItem);
                    } else {
                        var addChildMenuItem:ContextMenuItem = new ContextMenuItem('rename');
                        databaseTreeMenu.customItems.push(addChildMenuItem);
                    }
                }
            }

            
            public function onCreationComplete():void{
            	databaseTreeMenu.addEventListener(ContextMenuEvent.MENU_SELECT, databaseTreeMenuTriggered);
                databaseTreeMenu.hideBuiltInItems();

            	
            	if(null != commonModelLocator.selectedConnectionProps){
            		if(null != commonModelLocator.selectedConnectionProps.databaseConfiguration){
            			title = commonModelLocator.selectedConnectionProps.databaseConfiguration.userName
            				+ "@" + commonModelLocator.selectedConnectionProps.databaseConfiguration.hostName
            		}
            	}
            	var nodeCount:int = 0;
            	if(null != applicationModelLocator.databaseModel){
            		var treeRoot:TreeNode = new TreeNode();
            		var database:Database = applicationModelLocator.databaseModel;
            		treeRoot.data = database;
            		treeRoot.icon = imageLocator.databaseIcon;
            		treeRoot.name = "Database";
            		treeRoot.TargetType = TreeNode.TARGET_TYPE_DATABASE;
            		databaseTree.dataProvider = treeRoot;
            		databaseTree.setItemIcon(databaseTree.dataProvider.getItemAt(nodeCount), imageLocator.databaseIcon, imageLocator.databaseIcon);
            		if(null != database.schemaList){
            			for each(var schema:Schema in database.schemaList){
            				var schemaNode:TreeNode = new TreeNode();
            				schemaNode.data = schema;
            				schemaNode.name = schema.toString();
            				schemaNode.icon = imageLocator.schemaIcon;
            				schemaNode.TargetType = TreeNode.TARGET_TYPE_SCHEMA;
            				nodeCount++;
            				databaseTree.setItemIcon(
            					schemaNode, 
            					imageLocator.schemaIcon, imageLocator.schemaIcon);
            				if(null != schema.tableList){
            					var tableFolderNode:TreeNode = new TreeNode();
            					tableFolderNode.contextMenu = tableContextMenu();
            					tableFolderNode.name = "Tables";
            					for each(var table:Table in schema.tableList){
            						var tableNode:TreeNode = new TreeNode();
            						tableNode.data = table;
		            				tableNode.name = table.toString();
		            				tableNode.icon = imageLocator.tableIcon;
			            			nodeCount++;
            						databaseTree.setItemIcon(tableNode, imageLocator.tableIcon, imageLocator.tableIcon);
		            				if(null != table.columnlist){
		            					var columnFolderNode:TreeNode = new TreeNode();
		            					tableNode.TargetType = TreeNode.TARGET_TYPE_TABLE;
			            				columnFolderNode.name = "Columns";
		            					for each(var column:Column in table.columnlist){
		            						var columnNode:TreeNode = new TreeNode();
		            						columnNode.data = column;
				            				columnNode.name = column.toString();
				            				columnNode.TargetType = TreeNode.TARGET_TYPE_COLUMN;
				            				if(column.primaryKey){
				            					columnNode.icon = imageLocator.pkColumnIcon;
				            				}
				            				else if(column.foreignKey){
				            					columnNode.icon = imageLocator.fkColumnIcon;
				            				}
				            				else {
				            					columnNode.icon = imageLocator.columnIcon;
				            				}
				            				columnFolderNode.addChild(columnNode);
		            					}
		            					tableNode.addChild(columnFolderNode);
		            				}
		            				tableFolderNode.addChild(tableNode);
            					}
            					schemaNode.addChild(tableFolderNode);
            				}
            				
            				treeRoot.addChild(schemaNode);
            			}
            		}
            		
            		
            		
            	}
            }
            
            public function setIcons():void{
            	/* databaseTree.setItemIcon(databaseTree.dataProvider.getItemAt(0), 
            		imageLocator.databaseIcon, imageLocator.databaseIcon); */
            }
            
            public function treeClicked(event:MouseEvent):void{
            	
            }
            
            public function sayHello(evt:ContextMenuEvent):void{
            	Alert.show("sayHello");
            }
            
            public function tableContextMenu():ContextMenu{
            	var contextMenu:ContextMenu = new ContextMenu();
            	
            	var menuItem:ContextMenuItem = new ContextMenuItem("Change Color");
				menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, sayHello);
				contextMenu.customItems.push(menuItem);
				contextMenu.hideBuiltInItems();
				return contextMenu;
            }
            
            public function itemDoubleClicked(event:MouseEvent):void{
            	var selectedNode:TreeNode = databaseTree.selectedItem as TreeNode;
            	if(null != selectedNode && TreeNode.TARGET_TYPE_TABLE == selectedNode.TargetType){
            		applicationModelLocator.selectedTable = selectedNode.data as Table;
            		var tabOpen:Boolean = false;
            		if(null != rightPanelTabNavigator){
						var childArr:Array = rightPanelTabNavigator.getChildren();
						if(null != childArr){
							var count:int = 0;
							for each ( var child:Object in childArr){
								if(applicationModelLocator.selectedTable.modelName == child.label){
									rightPanelTabNavigator.selectedIndex = count;
									tabOpen = true;
									break;
								}
								count ++;
							}
						}
					}
					if(!tabOpen){
            			rightPanelTabNavigator.addChild(new TableDetailsPanel());
            			rightPanelTabNavigator.selectedIndex = rightPanelTabNavigator.getChildren().length-1;
     				}
            	}
            	rightPanelTabNavigator.validateNow();
            }
            
		]]>
	</mx:Script>
	
	<view1:DatabaseViewerViewHelper id="databaseViewerViewHelper"/>
	
	<mx:ArrayCollection id="arrColl">
        <mx:source>
            <mx:Array>
                <mx:Object label="Database" icon="{imageLocator.clearIcon}">
                    <mx:children>
                    	<mx:Object label="Connection" icon="{imageLocator.newConnectionIcon}" data="{UICommandConstants.NEW_CONNECTION_ACT_CMD}">
                    		<mx:children>
                    			<mx:Object label="Exit" icon="{imageLocator.exitIcon}" data="{UICommandConstants.EXIT_APP_ACT_CMD}"/>
                    		</mx:children>
                    	</mx:Object>
                        <mx:Object label="Exit" icon="{imageLocator.exitIcon}" data="{UICommandConstants.EXIT_APP_ACT_CMD}"/>
                    </mx:children>
                </mx:Object>
            </mx:Array>
        </mx:source>
    </mx:ArrayCollection>
	
	<mx:HDividedBox width="100%" height="100%">
		<mx:VBox width="30%" height="100%">
			<mx:HBox width="100%" height="25" id="databaseTreeToolbar">
				<mx:LinkButton width="24" height="100%" icon="{imageLocator.refreshIcon}" 
					toolTip="Reload Database"/>
				<mx:VRule height="90%"/>
				<mx:LinkButton width="24" height="100%" icon="{imageLocator.expandAllIcon}" 
					toolTip="Expand All"/>
				<mx:LinkButton width="24" height="100%" icon="{imageLocator.collaspeAllIcon}" 
					toolTip="Collaspe All"/>
			</mx:HBox>
			<mx:HBox width="100%" height="100%" id="databaseTreeBox">
				<mx:Tree id="databaseTree" width="100%" height="100%"
					labelField="name" showRoot="true" iconField="icon"
					contextMenu="{databaseTreeMenu}" doubleClickEnabled="true"
        			itemRollOver="setLastTreeItem(event)" doubleClick="itemDoubleClicked(event)"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox width="100%" height="100%" >
			<code:SuperTabNavigator closePolicy="{SuperTab.CLOSE_ROLLOVER}" width="100%" height="100%"
					id="rightPanelTabNavigator" >
				<visuals:SqlQueryBox width="100%" height="100%" id="sqlQueryBox" label="SQL Query" icon="{imageLocator.sqlEditorIcon}"/>
			</code:SuperTabNavigator>
		</mx:VBox>
	</mx:HDividedBox>
	
</ResizableWindow>
